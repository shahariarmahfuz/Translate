from flask import Flask, request, jsonify
import google.generativeai as genai  # ‚úÖ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶Æ‡ßá‡¶•‡¶°
import os
import re
import json

app = Flask(__name__)

# Configure GenAI API
genai.configure(api_key="AIzaSyCRhglDw40RjOUEDjnVBWICC9zqO3oTcEY")  # üîë ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ API ‡¶ï‡ßÄ ‡¶¶‡¶ø‡ßü‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡ßá‡¶∏ ‡¶ï‡¶∞‡ßÅ‡¶®

def get_translation_feedback(ban_text, eng_text):
    model = "gemini-2.0-flash"

    contents = [
        # Correct translation example
        genai.Content(
            role="user",
            parts=[genai.Part.from_text(
                "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø: ‡¶§‡¶ø‡¶®‡¶ø ‡¶ï‡ßã‡¶•‡¶æ‡¶Ø‡¶º ‡¶Ø‡¶æ‡¶®?\n‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶: Where does he go?\n"
                "‡¶è‡¶á ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶‡¶ü‡¶ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßá JSON ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®‡•§ ‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡¶æ ‡¶ö‡¶ø‡¶π‡ßç‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§"
            )],
        ),
        genai.Content(
            role="model",
            parts=[genai.Part.from_text(
                '{"status": "correct", "message": "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶∏‡¶†‡¶ø‡¶ï!", "correct_translation": "Where does he go?"}'
            )],
        ),
        
        # Incorrect translation example
        genai.Content(
            role="user",
            parts=[genai.Part.from_text(
                "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø: ‡¶§‡¶ø‡¶®‡¶ø ‡¶ï‡ßã‡¶•‡¶æ‡¶Ø‡¶º ‡¶Ø‡¶æ‡¶®?\n‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶: Whera duio he go?\n"
                "‡¶è‡¶á ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶‡¶ü‡¶ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßá JSON ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®‡•§ ‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡¶æ ‡¶ö‡¶ø‡¶π‡ßç‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§"
            )],
        ),
        genai.Content(
            role="model",
            parts=[genai.Part.from_text(
                '{"status": "incorrect", "message": "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶π‡ßü‡¶®‡¶ø‡•§", '
                '"errors": {"spelling": "Wrong spelling of \'Where\' and \'do\'.", "grammar": "Incorrect subject-verb agreement."}, '
                '"why": {"incorrect_reason": "\'Whera\' ‡¶è‡¶¨‡¶Ç \'duio\' ‡¶∂‡¶¨‡ßç‡¶¶ ‡¶¶‡ßÅ‡¶ü‡¶ø ‡¶≠‡ßÅ‡¶≤ ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßá ‡¶≤‡ßá‡¶ñ‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá, ‡¶è‡¶¨‡¶Ç \'do\' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá \'does\' ‡¶π‡¶ì‡ßü‡¶æ ‡¶â‡¶ö‡¶ø‡¶§‡•§", '
                '"correction_explanation": "\'Where\' ‡¶è‡¶¨‡¶Ç \'do\' ‡¶∏‡¶†‡¶ø‡¶ï ‡¶¨‡¶æ‡¶®‡¶æ‡¶®‡ßá ‡¶≤‡¶ø‡¶ñ‡¶§‡ßá ‡¶π‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç \'he\' ‡¶§‡ßÉ‡¶§‡ßÄ‡ßü ‡¶™‡ßÅ‡¶∞‡ßÅ‡¶∑ ‡¶è‡¶ï‡¶¨‡¶ö‡¶® ‡¶¨‡¶ø‡¶ß‡¶æ‡ßü \'does\' ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§ ‡¶§‡¶æ‡¶á ‡¶∏‡¶†‡¶ø‡¶ï ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶ ‡¶π‡¶¨‡ßá \'Where does he go?\'"}, '
                '"correct_translation": "Where does he go?"}'
            )],
        ),
        
        # Current request
        genai.Content(
            role="user",
            parts=[genai.Part.from_text(
                f"‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶¨‡¶æ‡¶ï‡ßç‡¶Ø: {ban_text}\n‡¶á‡¶Ç‡¶∞‡ßá‡¶ú‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶: {eng_text}\n"
                "‡¶è‡¶á ‡¶Ö‡¶®‡ßÅ‡¶¨‡¶æ‡¶¶‡¶ü‡¶ø ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßá JSON ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®‡•§ ‡¶ï‡ßã‡¶®‡ßã ‡¶Ö‡¶§‡¶ø‡¶∞‡¶ø‡¶ï‡ßç‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¨‡¶æ ‡¶ö‡¶ø‡¶π‡ßç‡¶® ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶¨‡ßá‡¶® ‡¶®‡¶æ‡•§"
            )],
        )
    ]

    config = genai.GenerateContentConfig(
        temperature=0.3,
        top_p=0.95,
        max_output_tokens=8192,
        response_mime_type="text/plain"
    )

    # Assuming `generate_content_stream` is the correct method
    response = genai.generate_content_stream(
        model=model,
        contents=contents,
        config=config
    )

    full_response = ""
    for chunk in response:
        if chunk.text:
            full_response += chunk.text

    # Clean JSON response
    clean_response = re.sub(r'^```json|```$', '', full_response, flags=re.IGNORECASE)
    return clean_response.strip()

@app.route('/translate', methods=['GET'])
def handle_translation():
    ban_text = request.args.get('ban')
    eng_text = request.args.get('eng')
    
    if not ban_text or not eng_text:
        return jsonify({"error": "Missing 'ban' or 'eng' parameters"}), 400

    try:
        gemini_response = get_translation_feedback(ban_text, eng_text)
        return jsonify(json.loads(gemini_response))
    except json.JSONDecodeError:
        return jsonify({"error": "Invalid response format from AI model"}), 500
    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
